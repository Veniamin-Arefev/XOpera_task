tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
  vm:
    derived_from: tosca.nodes.Compute
    properties:
      os:
        type: string
      vm_image_size:
        type: string
      vm_ram_mb:
        type: string
      vm_vcpus:
        type: string
      vm_user:
        type: string
      vm_ssh_key:
        type: string
    interfaces:
      Standard:
        operations:
          create:
            inputs:
              os:              { value: { get_property: [ SELF, os             ] }, type: string }
              vm_image_size:   { value: { get_property: [ SELF, vm_image_size  ] }, type: string }
              vm_ram_mb:       { value: { get_property: [ SELF, vm_ram_mb      ] }, type: string }
              vm_vcpus:        { value: { get_property: [ SELF, vm_vcpus       ] }, type: string }
              vm_user:         { value: { get_property: [ SELF, vm_user        ] }, type: string }
              vm_ssh_key:      { value: { get_property: [ SELF, vm_ssh_key     ] }, type: string }
            implementation: playbooks/vm/create.yaml
          delete: playbooks/vm/delete.yaml
    artifacts:
      image22:
        type: tosca.artifacts.File
        file: artifacts/images/jammy-server-cloudimg-amd64.img
      image20:
        type: tosca.artifacts.File
        file: artifacts/images/focal-server-cloudimg-amd64.img
      image18:
        type: tosca.artifacts.File
        file: artifacts/images/bionic-server-cloudimg-amd64.img
      user_template:
        type: tosca.artifacts.File
        file: artifacts/user-data-template.yaml.j2

  docker:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      docker_version:
        type: string
    capabilities:
      host:
        type: tosca.capabilities.Compute
    interfaces:
      Standard:
        operations:
          create:
            inputs:
              docker_version:  { value: { get_property: [ SELF, docker_version ] }, type: string }
            implementation: playbooks/docker/create.yaml
          delete: playbooks/docker/delete.yaml

  nginx:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      nginx_version:
        type: string
      site_text:
        type: string
      node_name:
        type: string
      port:
        type: integer
      locations:
        type: string
    interfaces:
      Standard:
        operations:
          create:
            inputs:
              nginx_version:        { value: { get_property: [ SELF, nginx_version  ] }, type: string }
              site_text:            { value: { get_property: [ SELF, site_text      ] }, type: string }
              node_name:            { value: { get_property: [ SELF, node_name      ] }, type: string }
              port:                 { value: { get_property: [ SELF, port           ] }, type: string }
              locations_additional: { value: { get_property: [ SELF, locations      ] }, type: string }
            implementation: playbooks/nginx/create.yaml
          delete: playbooks/nginx/delete.yaml
    artifacts:
      html_template:
        type: tosca.artifacts.File
        file: artifacts/index.html.j2
      dockerfile_template:
        type: tosca.artifacts.File
        file: artifacts/Dockerfile.j2
      conf_template:
        type: tosca.artifacts.File
        file: artifacts/default.conf.j2





topology_template:
  inputs:
    os:
      type: string
      default: ubuntu22
      constraints:
        - valid_values: [ubuntu22, ubuntu20, ubuntu18]
    vm_image_size:
      type: scalar-unit.size
      default: 20G
      constraints:
        - greater_or_equal: 5G
    vm_ram_mb:
      type: integer
      default: 4096
      constraints:
        - greater_or_equal: 2048
    vm_vcpus:
      type: integer
      default: 2
      constraints:
        - greater_or_equal: 2
    docker_version:
      type: string
      default: 24
    nginx_version:
      type: string
      default: latest
    node_name1:
      type: string
      default: static-1
    node_name2:
      type: string
      default: static-2
    node_name3:
      type: string
      default: proxy
    site_text1:
      type: string
      default: "  <h1>Hello here 111!</h1>
  <a href='\\'>Back</a>"
    site_text2:
      type: string
      default: "  <h1>Hello here 222!</h1>
  <a href='\\'>Back</a>"
    site_text3:
      type: string
      default: "  <h1>Hello here 333!</h1>
  <a href='\\anek1'>View anek1</a>
  <br>
  <a href='\\anek2'>View anek2</a>"
    port1: 
      type: integer
      default: 8081
    port2: 
      type: integer
      default: 8082
    port3: 
      type: integer
      default: 80
    locs1:      
      type: string
      default: ""
    locs2:
      type: string
      default: ""
    locs3:
      type: string
      default: "    location /anek1 {
        proxy_pass http://localhost:8081/;
    }

    location /anek2 {
        proxy_pass http://localhost:8082/;
    }
"
    vm_user:
      type: string
      default: root
    ip_address:
      type: string
      default: 192.168.122.55
    vm_ssh_public_key:
      type: string
      default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKRCyB9s/+sndwY+KY7HRntF+x5LP4We34zX23y393LTkb2ECui9bJhTWgQuwp4JJzo07g9KOsL/T8ItEjaG5w6yaqoGHOd/fQ8HILp71c7xQ+aaY78ROGnmC7tLMx7kBaWk7YWv+hq5QOaDkDn23qHaS2tAci/Tt5KeSydEt3F6oJrwpwc0VcgBnSa6CyIH3CDa63oHvFzYINvUyL7jEROk1KWrHHwqa6UEMbo/l/pSxNncEiGqNuethdI7DvamyC6dkomS7KEAugvNNqBdQAP8iLF7pSI1Yea0oVU+aljaps1d+cG2Sjc+W59kFHpiGSiiVcwfhIzGgCBQNxDlKvuzmUPVAB118s4SNBbpTVB7ebYIw2IJ6HBLXY9ezNmQoz0gsNkOlBW669pU9U9JEgQdfGUXDe1Vx4j4TXXWQvt2iczIi33SpRa6MPE1mUD1qFAoLXplKtsAIwNiRn46aL+x84kAuSFF27DPhkE9dJDzR2qtKNs5AQ2KxTCUbBhbM= remote@G512LU

  node_templates:
    my-vm:
      type: vm
      properties:
        os:              { get_input: os                }
        vm_image_size:   { get_input: vm_image_size     }
        vm_ram_mb:       { get_input: vm_ram_mb         }
        vm_vcpus:        { get_input: vm_vcpus          }
        vm_user:         { get_input: vm_user           }
        vm_ssh_key:      { get_input: vm_ssh_public_key }
      attributes:
        public_address:  { get_input: ip_address        }
        private_address: { get_input: ip_address        }

    my-docker:
      type: docker
      properties:
        docker_version:  { get_input: docker_version     }
      requirements:
        - host: my-vm

    my-nginx-1:
      type: nginx
      properties:
        nginx_version:   { get_input: nginx_version      }
        site_text:       { get_input: site_text1         }
        node_name:       { get_input: node_name1         }
        port:            { get_input: port1              }
        locations:       { get_input: locs1              }
      requirements:
        - host: my-vm
        - dependency: my-docker

    my-nginx-2:
      type: nginx
      properties:
        nginx_version:   { get_input: nginx_version      }
        site_text:       { get_input: site_text2         }
        node_name:       { get_input: node_name2         }
        port:            { get_input: port2              }
        locations:       { get_input: locs2              }
      requirements:
        - host: my-vm
        - dependency: my-docker

    my-nginx-3  :
      type: nginx
      properties:
        nginx_version:   { get_input: nginx_version      }
        site_text:       { get_input: site_text3         }
        node_name:       { get_input: node_name3         }
        port:            { get_input: port3              }
        locations:       { get_input: locs3              }
      requirements:
        - host: my-vm
        - dependency: my-docker


